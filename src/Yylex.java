// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: Scanner.flex

import java.io.*;
import java_cup.runtime.*;


// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
public class Yylex implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;
  public static final int COMMENT = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2, 2
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\25\u0100\1\u0200\11\u0100\1\u0300\17\u0100\1\u0400\u10cf\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\2\1\1\3\22\0\1\1\1\4"+
    "\1\5\2\0\1\6\1\7\1\0\1\10\1\11\1\12"+
    "\1\13\1\14\1\15\1\16\1\17\1\20\11\21\1\0"+
    "\1\22\1\23\1\24\1\25\2\0\1\26\3\27\1\30"+
    "\1\27\2\31\1\32\2\31\1\33\1\31\1\34\1\31"+
    "\1\35\1\31\1\36\5\31\1\37\2\31\1\40\1\0"+
    "\1\41\1\0\1\42\1\0\1\43\1\44\1\45\1\46"+
    "\1\47\1\50\1\51\1\52\1\53\1\31\1\54\1\55"+
    "\1\56\1\57\1\60\1\61\1\31\1\62\1\63\1\64"+
    "\1\65\1\66\1\67\1\70\1\71\1\31\1\72\1\73"+
    "\1\74\7\0\1\1\32\0\1\1\u01df\0\1\1\177\0"+
    "\13\1\35\0\2\1\5\0\1\1\57\0\1\1\240\0"+
    "\1\1\377\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1280];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\1\2\1\3\1\4\1\5\1\1\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\2\16"+
    "\1\17\1\20\1\21\1\22\4\23\1\24\1\25\14\23"+
    "\1\26\1\1\1\27\1\30\1\31\1\2\1\32\1\33"+
    "\1\34\1\2\1\35\1\0\1\36\1\37\1\40\3\23"+
    "\1\41\10\23\1\42\12\23\1\43\1\44\1\2\1\0"+
    "\1\16\12\23\1\45\1\23\1\46\1\47\7\23\1\0"+
    "\1\35\3\23\1\50\3\23\1\51\3\23\1\52\2\23"+
    "\1\53\1\54\1\55\2\23\1\56\2\23\1\57\1\60"+
    "\6\23\1\61\3\23\1\62\3\23\1\63\1\64\3\23"+
    "\1\65\2\23\1\66\1\23\1\67\4\23\1\70\1\23"+
    "\1\71\1\72";

  private static int [] zzUnpackAction() {
    int [] result = new int[164];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\75\0\172\0\267\0\267\0\364\0\267\0\267"+
    "\0\u0131\0\267\0\267\0\267\0\267\0\267\0\267\0\267"+
    "\0\u016e\0\u01ab\0\u01e8\0\267\0\u0225\0\u0262\0\u029f\0\u02dc"+
    "\0\u0319\0\u0356\0\u0393\0\u03d0\0\267\0\u040d\0\u044a\0\u0487"+
    "\0\u04c4\0\u0501\0\u053e\0\u057b\0\u05b8\0\u05f5\0\u0632\0\u066f"+
    "\0\u06ac\0\267\0\u06e9\0\267\0\u0726\0\267\0\u0763\0\267"+
    "\0\267\0\267\0\u07a0\0\u07dd\0\u081a\0\267\0\267\0\267"+
    "\0\u0857\0\u0894\0\u08d1\0\267\0\u090e\0\u094b\0\u0988\0\u09c5"+
    "\0\u0a02\0\u0a3f\0\u0a7c\0\u0ab9\0\u02dc\0\u0af6\0\u0b33\0\u0b70"+
    "\0\u0bad\0\u0bea\0\u0c27\0\u0c64\0\u0ca1\0\u0cde\0\u0d1b\0\267"+
    "\0\267\0\u0d58\0\u0d95\0\u081a\0\u0dd2\0\u0e0f\0\u0e4c\0\u0e89"+
    "\0\u0ec6\0\u0f03\0\u0f40\0\u0f7d\0\u0fba\0\u0ff7\0\u02dc\0\u1034"+
    "\0\u1071\0\u02dc\0\u10ae\0\u10eb\0\u1128\0\u1165\0\u11a2\0\u11df"+
    "\0\u121c\0\u1259\0\u1259\0\u1296\0\u12d3\0\u1310\0\u02dc\0\u134d"+
    "\0\u138a\0\u13c7\0\u02dc\0\u1404\0\u1441\0\u147e\0\u02dc\0\u14bb"+
    "\0\u14f8\0\u02dc\0\u02dc\0\u02dc\0\u1535\0\u1572\0\u02dc\0\u15af"+
    "\0\u15ec\0\u02dc\0\u02dc\0\u1629\0\u1666\0\u16a3\0\u16e0\0\u171d"+
    "\0\u175a\0\u02dc\0\u1797\0\u17d4\0\u1811\0\u02dc\0\u184e\0\u188b"+
    "\0\u18c8\0\u02dc\0\u02dc\0\u1905\0\u1942\0\u197f\0\u02dc\0\u19bc"+
    "\0\u19f9\0\u02dc\0\u1a36\0\u02dc\0\u1a73\0\u1ab0\0\u1aed\0\u1b2a"+
    "\0\u02dc\0\u1b67\0\u02dc\0\u02dc";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[164];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\3\5\1\6\1\7\1\10\1\11\1\12\1\13"+
    "\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23"+
    "\1\24\1\25\1\26\1\27\6\30\1\31\1\32\1\33"+
    "\1\30\1\34\1\35\1\4\1\30\1\36\1\37\1\40"+
    "\1\41\1\42\2\30\1\43\3\30\1\44\2\30\1\45"+
    "\1\46\1\47\1\30\1\50\1\51\2\30\1\52\1\53"+
    "\1\54\2\55\2\4\1\55\1\56\67\55\12\5\1\57"+
    "\62\5\121\0\1\60\57\0\1\61\77\0\1\62\4\0"+
    "\1\63\73\0\1\64\1\0\2\23\15\0\1\65\30\0"+
    "\1\65\22\0\1\64\1\0\2\23\77\0\1\66\74\0"+
    "\1\67\74\0\1\70\70\0\2\30\4\0\12\30\2\0"+
    "\30\30\23\0\2\30\4\0\12\30\2\0\5\30\1\71"+
    "\22\30\23\0\2\30\4\0\12\30\2\0\20\30\1\72"+
    "\7\30\23\0\2\30\4\0\12\30\2\0\5\30\1\73"+
    "\22\30\44\0\1\74\53\0\2\30\4\0\12\30\2\0"+
    "\16\30\1\75\1\30\1\76\7\30\23\0\2\30\4\0"+
    "\12\30\2\0\13\30\1\77\14\30\23\0\2\30\4\0"+
    "\12\30\2\0\16\30\1\100\11\30\23\0\2\30\4\0"+
    "\12\30\2\0\13\30\1\101\12\30\1\102\1\30\23\0"+
    "\2\30\4\0\12\30\2\0\1\30\1\103\14\30\1\104"+
    "\11\30\23\0\2\30\4\0\12\30\2\0\6\30\1\105"+
    "\5\30\1\106\1\107\12\30\23\0\2\30\4\0\12\30"+
    "\2\0\5\30\1\110\15\30\1\111\4\30\23\0\2\30"+
    "\4\0\12\30\2\0\5\30\1\112\22\30\23\0\2\30"+
    "\4\0\12\30\2\0\22\30\1\113\5\30\23\0\2\30"+
    "\4\0\12\30\2\0\10\30\1\114\7\30\1\115\7\30"+
    "\23\0\2\30\4\0\12\30\2\0\16\30\1\116\11\30"+
    "\23\0\2\30\4\0\12\30\2\0\10\30\1\117\17\30"+
    "\76\0\1\120\1\0\2\55\2\0\1\55\1\0\67\55"+
    "\17\0\1\121\55\0\2\63\1\5\1\122\71\63\20\0"+
    "\2\64\6\0\1\123\16\0\1\123\45\0\2\124\4\0"+
    "\3\124\12\0\6\124\44\0\2\30\4\0\12\30\2\0"+
    "\25\30\1\125\2\30\23\0\2\30\4\0\12\30\2\0"+
    "\11\30\1\126\16\30\23\0\2\30\4\0\12\30\2\0"+
    "\1\30\1\127\26\30\23\0\2\30\4\0\12\30\2\0"+
    "\16\30\1\130\11\30\23\0\2\30\4\0\12\30\2\0"+
    "\5\30\1\131\22\30\23\0\2\30\4\0\12\30\2\0"+
    "\1\30\1\132\26\30\23\0\2\30\4\0\12\30\2\0"+
    "\23\30\1\133\4\30\23\0\2\30\4\0\12\30\2\0"+
    "\21\30\1\134\6\30\23\0\2\30\4\0\12\30\2\0"+
    "\22\30\1\135\5\30\23\0\2\30\4\0\12\30\2\0"+
    "\13\30\1\136\14\30\23\0\2\30\4\0\12\30\2\0"+
    "\20\30\1\137\7\30\23\0\2\30\4\0\12\30\2\0"+
    "\17\30\1\140\10\30\23\0\2\30\4\0\12\30\2\0"+
    "\22\30\1\141\5\30\23\0\2\30\4\0\12\30\2\0"+
    "\25\30\1\142\2\30\23\0\2\30\4\0\12\30\2\0"+
    "\13\30\1\143\14\30\23\0\2\30\4\0\12\30\2\0"+
    "\22\30\1\144\5\30\23\0\2\30\4\0\12\30\2\0"+
    "\20\30\1\145\7\30\23\0\2\30\4\0\12\30\2\0"+
    "\11\30\1\146\16\30\23\0\2\30\4\0\12\30\2\0"+
    "\23\30\1\147\4\30\23\0\2\30\4\0\12\30\2\0"+
    "\11\30\1\150\16\30\23\0\2\30\4\0\12\30\2\0"+
    "\11\30\1\151\16\30\5\0\1\5\105\0\1\152\1\0"+
    "\1\152\2\0\2\153\73\0\2\30\4\0\1\154\11\30"+
    "\2\0\30\30\23\0\2\30\4\0\12\30\2\0\15\30"+
    "\1\155\12\30\23\0\2\30\4\0\12\30\2\0\4\30"+
    "\1\156\23\30\23\0\2\30\4\0\12\30\2\0\13\30"+
    "\1\157\14\30\23\0\2\30\4\0\12\30\2\0\1\30"+
    "\1\160\26\30\23\0\2\30\4\0\12\30\2\0\21\30"+
    "\1\161\6\30\23\0\2\30\4\0\12\30\2\0\2\30"+
    "\1\162\25\30\23\0\2\30\4\0\12\30\2\0\5\30"+
    "\1\163\22\30\23\0\2\30\4\0\12\30\2\0\5\30"+
    "\1\164\22\30\23\0\2\30\4\0\12\30\2\0\21\30"+
    "\1\147\6\30\23\0\2\30\4\0\12\30\2\0\13\30"+
    "\1\165\14\30\23\0\2\30\4\0\12\30\2\0\5\30"+
    "\1\166\22\30\23\0\2\30\4\0\12\30\2\0\13\30"+
    "\1\167\14\30\23\0\2\30\4\0\12\30\2\0\23\30"+
    "\1\170\4\30\23\0\2\30\4\0\12\30\2\0\11\30"+
    "\1\171\16\30\23\0\2\30\4\0\12\30\2\0\21\30"+
    "\1\172\6\30\23\0\2\30\4\0\12\30\2\0\5\30"+
    "\1\173\22\30\23\0\2\30\4\0\12\30\2\0\4\30"+
    "\1\174\23\30\23\0\2\30\4\0\12\30\2\0\13\30"+
    "\1\175\14\30\23\0\2\153\73\0\2\30\4\0\12\30"+
    "\2\0\20\30\1\176\7\30\23\0\2\30\4\0\12\30"+
    "\2\0\22\30\1\177\5\30\23\0\2\30\4\0\4\30"+
    "\1\200\1\201\4\30\2\0\30\30\23\0\2\30\4\0"+
    "\12\30\2\0\12\30\1\202\15\30\23\0\2\30\4\0"+
    "\12\30\2\0\21\30\1\203\6\30\23\0\2\30\4\0"+
    "\12\30\2\0\13\30\1\204\14\30\23\0\2\30\4\0"+
    "\12\30\2\0\15\30\1\205\12\30\23\0\2\30\4\0"+
    "\12\30\2\0\5\30\1\206\22\30\23\0\2\30\4\0"+
    "\12\30\2\0\20\30\1\207\7\30\23\0\2\30\4\0"+
    "\12\30\2\0\20\30\1\210\7\30\23\0\2\30\4\0"+
    "\12\30\2\0\15\30\1\211\12\30\23\0\2\30\4\0"+
    "\12\30\2\0\5\30\1\212\22\30\23\0\2\30\4\0"+
    "\12\30\2\0\20\30\1\213\7\30\23\0\2\30\4\0"+
    "\12\30\2\0\15\30\1\214\12\30\23\0\2\30\4\0"+
    "\12\30\2\0\11\30\1\215\16\30\23\0\2\30\4\0"+
    "\12\30\2\0\5\30\1\216\22\30\23\0\2\30\4\0"+
    "\12\30\2\0\4\30\1\217\23\30\23\0\2\30\4\0"+
    "\12\30\2\0\14\30\1\220\13\30\23\0\2\30\4\0"+
    "\12\30\2\0\6\30\1\221\21\30\23\0\2\30\4\0"+
    "\12\30\2\0\15\30\1\222\12\30\23\0\2\30\4\0"+
    "\12\30\2\0\7\30\1\223\20\30\23\0\2\30\4\0"+
    "\12\30\2\0\1\30\1\224\26\30\23\0\2\30\4\0"+
    "\12\30\2\0\22\30\1\225\5\30\23\0\2\30\4\0"+
    "\12\30\2\0\15\30\1\226\12\30\23\0\2\30\4\0"+
    "\12\30\2\0\21\30\1\227\6\30\23\0\2\30\4\0"+
    "\12\30\2\0\5\30\1\230\22\30\23\0\2\30\4\0"+
    "\12\30\2\0\1\30\1\231\26\30\23\0\2\30\4\0"+
    "\12\30\2\0\27\30\1\232\23\0\2\30\4\0\12\30"+
    "\2\0\5\30\1\233\22\30\23\0\2\30\4\0\12\30"+
    "\2\0\5\30\1\234\22\30\23\0\2\30\4\0\12\30"+
    "\2\0\15\30\1\235\12\30\23\0\2\30\4\0\12\30"+
    "\2\0\3\30\1\236\24\30\23\0\2\30\4\0\12\30"+
    "\2\0\7\30\1\237\20\30\23\0\2\30\4\0\12\30"+
    "\2\0\22\30\1\240\5\30\23\0\2\30\4\0\12\30"+
    "\2\0\5\30\1\241\22\30\23\0\2\30\4\0\12\30"+
    "\2\0\5\30\1\242\22\30\23\0\2\30\4\0\12\30"+
    "\2\0\21\30\1\243\6\30\23\0\2\30\4\0\12\30"+
    "\2\0\20\30\1\244\7\30\3\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[7076];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\2\11\1\1\2\11\1\1\7\11\3\1\1\11"+
    "\10\1\1\11\14\1\1\11\1\1\1\11\1\1\1\11"+
    "\1\1\3\11\2\1\1\0\3\11\3\1\1\11\23\1"+
    "\2\11\1\1\1\0\26\1\1\0\72\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[164];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
        StringBuilder string = new StringBuilder();
        String value;
	private int lineNumber = 1;
	public int lineNumber() { return lineNumber; }

    private Symbol token(int type) {
        return new Symbol(type);
    }
    private Symbol token(int type, Object value) {
        return new Symbol(type,value);
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Yylex(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
            switch (zzLexicalState) {
            case YYINITIAL: {
              return token( Sym.EOF );
            }  // fall though
            case 165: break;
            case STRING: {
              return token( Sym.UNDEFINED_TOKEN );
            }  // fall though
            case 166: break;
            case COMMENT: {
              return token( Sym.UNDEFINED_TOKEN );
            }  // fall though
            case 167: break;
            default:
          { return new java_cup.runtime.Symbol(Sym.EOF); }
        }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return token( Sym.UNDEFINED_TOKEN );
            }
            // fall through
          case 59: break;
          case 2:
            { 
            }
            // fall through
          case 60: break;
          case 3:
            { return token(Sym.EXCLAMATION);
            }
            // fall through
          case 61: break;
          case 4:
            { yybegin(STRING);
        string.setLength(0);
            }
            // fall through
          case 62: break;
          case 5:
            { return token(Sym.PERCENT);
            }
            // fall through
          case 63: break;
          case 6:
            { return token(Sym.LEFTPAREN);
            }
            // fall through
          case 64: break;
          case 7:
            { return token(Sym.RIGHTPAREN);
            }
            // fall through
          case 65: break;
          case 8:
            { return token(Sym.MULL);
            }
            // fall through
          case 66: break;
          case 9:
            { return token(Sym.PLUS);
            }
            // fall through
          case 67: break;
          case 10:
            { return token(Sym.COMMA);
            }
            // fall through
          case 68: break;
          case 11:
            { return token(Sym.MINUS);
            }
            // fall through
          case 69: break;
          case 12:
            { return token(Sym.DOT);
            }
            // fall through
          case 70: break;
          case 13:
            { return token(Sym.DIV);
            }
            // fall through
          case 71: break;
          case 14:
            { return token( Sym.T_INTLITERAL, yytext() );
            }
            // fall through
          case 72: break;
          case 15:
            { return token(Sym.SEMI);
            }
            // fall through
          case 73: break;
          case 16:
            { return token(Sym.LESS);
            }
            // fall through
          case 74: break;
          case 17:
            { return token(Sym.ASSIGN);
            }
            // fall through
          case 75: break;
          case 18:
            { return token(Sym.BIGGER);
            }
            // fall through
          case 76: break;
          case 19:
            { value = yytext();
        if (value.length()>31){
           return token(Sym.UNDEFINED_TOKEN);
        }
        else
       return token( Sym.T_ID,  yytext());
            }
            // fall through
          case 77: break;
          case 20:
            { return token(Sym.OPENBRACKET);
            }
            // fall through
          case 78: break;
          case 21:
            { return token(Sym.CLOSEBRACKET);
            }
            // fall through
          case 79: break;
          case 22:
            { return token(Sym.OPENAC);
            }
            // fall through
          case 80: break;
          case 23:
            { return token(Sym.CLOSEAC);
            }
            // fall through
          case 81: break;
          case 24:
            { string.append(yytext());
            }
            // fall through
          case 82: break;
          case 25:
            { yybegin(YYINITIAL);
        value = "\"" + string.toString() + "\"";
        return token( Sym.T_STRINGLITERAL,value  );
            }
            // fall through
          case 83: break;
          case 26:
            { return token(Sym.NOTEQUALS);
            }
            // fall through
          case 84: break;
          case 27:
            { return token(Sym.AND);
            }
            // fall through
          case 85: break;
          case 28:
            { yybegin(COMMENT);
            }
            // fall through
          case 86: break;
          case 29:
            { return token( Sym.T_DOUBLELITERAL, yytext() );
            }
            // fall through
          case 87: break;
          case 30:
            { return token(Sym.LESSEQUAL);
            }
            // fall through
          case 88: break;
          case 31:
            { return token(Sym.EQUALS);
            }
            // fall through
          case 89: break;
          case 32:
            { return token(Sym.BIGEQUAL);
            }
            // fall through
          case 90: break;
          case 33:
            { return token(Sym.BRACKETS);
            }
            // fall through
          case 91: break;
          case 34:
            { return token(Sym.IF);
            }
            // fall through
          case 92: break;
          case 35:
            { return token(Sym.OR);
            }
            // fall through
          case 93: break;
          case 36:
            { yybegin(YYINITIAL);
            }
            // fall through
          case 94: break;
          case 37:
            { return token(Sym.FOR);
            }
            // fall through
          case 95: break;
          case 38:
            { return token(Sym.INT);
            }
            // fall through
          case 96: break;
          case 39:
            { return token(Sym.NEW);
            }
            // fall through
          case 97: break;
          case 40:
            { return token(Sym.BOOL);
            }
            // fall through
          case 98: break;
          case 41:
            { return token(Sym.ELSE);
            }
            // fall through
          case 99: break;
          case 42:
            { return token(Sym.NULL);
            }
            // fall through
          case 100: break;
          case 43:
            { return token(Sym.THIS);
            }
            // fall through
          case 101: break;
          case 44:
            { return token( Sym.T_BOOLEANLITERAL, yytext() );
            }
            // fall through
          case 102: break;
          case 45:
            { return token(Sym.VOID);
            }
            // fall through
          case 103: break;
          case 46:
            { return token(Sym.PRINT);
            }
            // fall through
          case 104: break;
          case 47:
            { return token(Sym.BREAK);
            }
            // fall through
          case 105: break;
          case 48:
            { return token(Sym.CLASS);
            }
            // fall through
          case 106: break;
          case 49:
            { return token(Sym.WHILE);
            }
            // fall through
          case 107: break;
          case 50:
            { return token(Sym.DOUBLE);
            }
            // fall through
          case 108: break;
          case 51:
            { return token(Sym.RETURN);
            }
            // fall through
          case 109: break;
          case 52:
            { return token(Sym.STRING);
            }
            // fall through
          case 110: break;
          case 53:
            { return token(Sym.EXTENDS);
            }
            // fall through
          case 111: break;
          case 54:
            { return token(Sym.NEWARRAY);
            }
            // fall through
          case 112: break;
          case 55:
            { return token(Sym.READLINE);
            }
            // fall through
          case 113: break;
          case 56:
            { return token(Sym.INTERFACE);
            }
            // fall through
          case 114: break;
          case 57:
            { return token(Sym.IMPLEMENTS);
            }
            // fall through
          case 115: break;
          case 58:
            { return token(Sym.READINTEGER);
            }
            // fall through
          case 116: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
