import java.util.*;
import java.io.*;
import java_cup.runtime.*;
import Model.*;
import java.util.ArrayList;


Parser code {:
    // Connect this Parser to a scanner!

                    private Yylex lexer;
                    private File file;

                    	 public Parser( File file ) {
                    	 this();
                    		this.file = file;
                    		try {
                    			lexer = new Yylex( new FileReader( file ) );
                    			}
                    		catch ( IOException exception ) {
                    			throw new Error( "No" );
                    			}
                    		}

:}

scan with {: return lexer.yylex(); :};

//list of terminals
terminal CLASS, INT, BOOL, DOUBLE, STRING, EXTENDS, VOID, INTERFACE, NULL, THIS, IMPLEMENTS, FOR, WHILE, IF, ELSE, RETURN, BREAK, NEW, NEWARRAY, PRINT, READINTEGER, READLINE, MINUS, PLUS, MULL, DIV, PERCENT, LESS, BIGGER, EXCLAMATION, SEMI, COMMA, DOT, ASSIGN, LEFTPAREN, RIGHTPAREN, OPENBRACKET, CLOSEBRACKET, OPENAC, CLOSEAC, BIGEQUAL, LESSEQUAL, EQUALS, NOTEQUALS, AND, OR, BRACKETS;
terminal String T_ID, T_STRINGLITERAL;
terminal Integer T_INTLITERAL;
terminal Double T_DOUBLELITERAL;
terminal Boolean T_BOOLEANLITERAL  ;

//list of non terminals
non terminal Initial Initial;
non terminal ArrayList<Decl> Program;
non terminal Decl Decl;
non terminal VariableDecl VariableDecl,Variable;
non terminal Type Type;
non terminal FunctionDecl FunctionDecl;
non terminal ArrayList<VariableDecl> Formals,TempFormals;
non terminal ClassDecl ClassDecl;
non terminal ClassType Pars;
non terminal Decl Feild;
non terminal ArrayList<Decl> Fields;
non terminal StmtBlock StmtBlock;
non terminal ArrayList<VariableDecls> VarDecls;
non terminal ArrayList<Stmt> Stmts;
non terminal Stmt Stmt;
non terminal WhileStmt WhileStmt;
non terminal ForStmt ForStmt;
non terminal ReturnStmt ReturnStmt;
non terminal BreakStmt BreakStmt;
non terminal PrintStmt PrintStmt;
non terminal Expr Expr;
non terminal Lvalue Lvalue;
non terminal Call Call;
non terminal ArrayList<Expr> Actuals;
non terminal Constant Constants;
non terminal ArrayList<Expr> Exprs;
non terminal Expr ExprOrNot;
non terminal IfStmt If_then_statement, If_then_else_statement, Statement_no_short_if, If_then_else_statement_no_short_if;
non terminal WhileStmt While_statement_no_short_if;
non terminal ForStmt For_statement_no_short_if;


//precedence of operators
precedence left LEFTPAREN;
precedence left DOT, OPENBRACKET;
precedence left EXCLAMATION;
precedence left MULL, DIV, PERCENT;
precedence left PLUS, MINUS;
precedence left LESS, LESSEQUAL, BIGGER, BIGEQUAL;
precedence left EQUALS, NOTEQUALS;
precedence left AND;
precedence left OR;
precedence left ASSIGN;

start with Initial;

Initial      ::= Program:p {:
							Initial initial=new Initial(p);
                            initial.cgen();

							System.out.println("Yes"); done_parsing(); 

						:};

Program      ::= Decl:d {:
                        RESULT=new ArrayList<Decl>();
                        RESULT.add(d);
                    :}
                    |
                 Program:p Decl:d {:
                        RESULT=p;
                        RESULT.add(d);
                    :};

Decl         ::= VariableDecl:d {:
                        RESULT=d;
                    :} |
                 FunctionDecl:d {:
                        RESULT=d;
                    :} |
                 ClassDecl:d {:
                        RESULT=d;
                    :};

VariableDecl ::= Variable:v SEMI {:
                        RESULT=v;
                    :};

Variable     ::= Type:t T_ID:i {:
                        RESULT=new VariableDecl(t,new Identifer(i));
                    :};

Type         ::= INT {:
                        RESULT=Type.intType;
                    :} |
                 DOUBLE {:
                        RESULT=Type.doubleType;
                    :} |
                 BOOL {:
                        RESULT=Type.boolType;
                    :} |
                 STRING {:
                        RESULT=Type.stringType;
                    :} |
                 T_ID:i {:
                        RESULT=new ClassType(new Identifier(i));
                    :} |
                 Type:t BRACKETS {:
                        RESULT=new ArrayType(t);
                    :};

FunctionDecl ::= Type:t T_ID:i LEFTPAREN Formals:f RIGHTPAREN StmtBlock:s {:
                        RESULT=new FunctionDecl(t,new Identifier(i),f,s);
                    :} |
                 VOID T_ID LEFTPAREN Formals RIGHTPAREN StmtBlock {:
                        RESULT=new FunctionDecl(Type.voidType,new Identifier(i),f,s);
                    :};

Formals          ::= TempFormals:f {:
                            RESULT=f;
                        :} |
                            {:
                            RESULT=new ArrayList<VariableDecl>();
                        :};

TempFormals      ::=  Variable:v {:
                        RESULT=new ArrayList<VariableDecl>();
                        RESULT.add(v);
                    :} |
                  TempFormals:f COMMA Variable:v {:
                        RESULT=f;
                        RESULT.add(v);
                    :};

ClassDecl    ::= CLASS T_ID:i Pars:p OPENAC Fields:f CLOSEAC {:
                        RESULT=new ClassDecl(new Identifier(i),p,f);
                    :};

Pars         ::= EXTENDS T_ID:i {:
                        RESULT=new ClassType(new Identifier(i));
                    :} |
                    {:
                        RESULT=null;
                    :};

Fields        ::= Fields:f Feild:x {:
                        RESULT=f;
                        RESULT.add(x);
                    :} |
                    {:
                        RESULT=new ArrayList<Decl>();
                    :}
                 ;

Feild        ::= VariableDecl:d {:
                    RESULT=d;
                    :} |
                 FunctionDecl:d {:
                    RESULT=d;
                 :};

StmtBlock    ::= OPENAC VarDecls:v Stmts:s CLOSEAC {:
                    RESULT=new StmtBlock(v,s);
                 :};

VarDecls        ::= VarDecls:v VariableDecl:x {:
                    RESULT=v;
                    RESULT.add(x);
                 :} |
                 {:
                    RESULT=new Arraylist<VariableDecl>();
                 :};

Stmts        ::=  Stmts:s Stmt:x {:
                    RESULT=s;
                    RESULT.add(x);
                 :} |
                 {:
                    RESULT=new ArrayList<Stmt>();
                 :};

Stmt         ::= Expr:e SEMI {:
                    RESULT=e;
                 :} |
                 SEMI {:
                    RESULT=new NullStmt();
                 :} |
                 WhileStmt:s {:
                    RESULT=s;
                 :} |
                 If_then_statement:s {:
                    RESULT=s;
                 :} |
                 If_then_else_statement:s {:
                    RESULT=s;
                 :}
                 ForStmt:s {:
                    RESULT=s;
                 :} |
                 BreakStmt:s {:
                    RESULT=s;
                 :} |
                 ReturnStmt:s {:
                    RESULT=s;
                 :} |
                 PrintStmt:s {:
                    RESULT=s;
                 :} |
                 StmtBlock:s {:
                    RESULT=s;
                 :}
                 ;

Statement_no_short_if ::=   Expr:e SEMI {:
                                RESULT=e;
                            :} |
                            SEMI {:
                                RESULT=new NullStmt();
                            :} |
                            While_statement_no_short_if:s {:
                                RESULT=s;
                            :} |
                            If_then_else_statement_no_short_if:s {:
                                RESULT=s;
                            :} |
                            For_statement_no_short_if:s {:
                                RESULT=s;
                            :} |
                            BreakStmt:s {:
                                RESULT=s;
                            :} |
                            ReturnStmt:s {:
                                RESULT=s;
                            :} |
                            PrintStmt:s {:
                                RESULT=s;
                            :} |
                            StmtBlock {:
                                RESULT=s;
                            :}
                            ;


If_then_statement ::=   IF LEFTPAREN Expr:e RIGHTPAREN Stmt:s {:
                            RESULT=new IfStmt(e,s);
                        :};

If_then_else_statement ::= IF LEFTPAREN Expr:e RIGHTPAREN Statement_no_short_if:s ELSE Stmt:r {:
                            RESULT=new IfStmt(e,s,r);
                        :};

If_then_else_statement_no_short_if ::=
    		IF LEFTPAREN Expr:e RIGHTPAREN Statement_no_short_if:s
    			ELSE Statement_no_short_if:r {:
    			    RESULT=new IfStmt(e,s,r);
    			:};

While_statement_no_short_if ::= WHILE LEFTPAREN Expr:e RIGHTPAREN Statement_no_short_if:s {:
                                    RESULT=new WhileStmt(e,s);
                                :};

For_statement_no_short_if ::=
		FOR LEFTPAREN ExprOrNot:x SEMI Expr:e SEMI
			ExprOrNot:y RIGHTPAREN Statement_no_short_if:s {:
			    RESULT=new ForStmt(x,e,y,s);
			:};


WhileStmt    ::= WHILE LEFTPAREN Expr:e RIGHTPAREN Stmt:s {:
                    RESULT=new WhileStmt(e,s);
                 :};

ForStmt      ::=    FOR LEFTPAREN ExprOrNot:x SEMI Expr:e SEMI ExprOrNot:y RIGHTPAREN Stmt:s {:
                        RESULT=new ForStmt(x,e,y,s);
                    :};

ExprOrNot       ::= Expr:e {:
                        RESULT=e;
                    :} |
                    {:
                        RESULT=null;
                    :};

ReturnStmt   ::=    RETURN ExprOrNot:e SEMI {:
                        RESULT=new ReturnStmt(e);
                    :};

BreakStmt    ::=    BREAK SEMI {:
                        RESULT=new BreakStmt();
                    :};

PrintStmt    ::=    PRINT LEFTPAREN Exprs:e RIGHTPAREN SEMI {:
                        RESULT=new PrintStmt(e);
                    :};

Exprs        ::=    Expr:e {:
                        RESULT=new ArrayList<Expr>();
                        RESULT.add(e);
                    :} |
                    Exprs:x COMMA Expr:e {:
                        RESULT=x;
                        RESULT.add(e);
                    :};

Expr         ::=    Lvalue:l ASSIGN Expr:e {:
                        RESULT=new AssignmentExpr(l,e);
                    :} |
                    Constants:c {:
                        RESULT=c;
                    :} |
                    Lvalue:l {:
                        RESULT=new LvalueExpr(l);
                    :} |
                    THIS {:
                        RESULT=new This();
                    :} |
                    Call:c {:
                        RESULT=c;
                    :} |
                    LEFTPAREN Expr:e RIGHTPAREN {:
                        RESULT=e;
                    :} |
                    Expr:x PLUS Expr:y {:
                        RESULT=new ArithmeticExpr(x,y,new Operator("+");
                    :} |
                    Expr:x MINUS Expr:y {:
                        RESULT=new ArithmeticExpr(x,y,new Operator("-");
                    :} |
                    Expr:x MULL Expr:y {:
                        RESULT=new ArithmeticExpr(x,y,new Operator("*");
                    :} |
                    Expr:x DIV Expr:y {:
                        RESULT=new ArithmeticExpr(x,y,new Operator("/");
                    :} |
                    Expr:x PERCENT Expr:y {:
                        RESULT=new ArithmeticExpr(x,y,new Operator("%");
                    :} |
                    MINUS Expr:x {:
                        RESULT=new ArithmeticExpr(x,new Operator("-"));
                    :} |
                    Expr:x LESS Expr:y {:
                        RESULT=new ArithmeticExpr(x,y,new Operator("<");
                    :} |
                    Expr:x LESSEQUAL Expr:y {:
                        RESULT=new ArithmeticExpr(x,y,new Operator("<=");
                    :} |
                    Expr:x BIGGER Expr:y {:
                        RESULT=new ArithmeticExpr(x,y,new Operator(">");
                    :} |
                    Expr:x BIGEQUAL Expr:y {:
                        RESULT=new ArithmeticExpr(x,y,new Operator(">=");
                    :} |
                    Expr:x EQUALS Expr:y {:
                        RESULT=new ArithmeticExpr(x,y,new Operator("==");
                    :} |
                    Expr:x NOTEQUALS Expr:y {:
                        RESULT=new ArithmeticExpr(x,y,new Operator("!=");
                    :} |
                    Expr:x AND Expr:y {:
                        RESULT=new ArithmeticExpr(x,y,new Operator("&&");
                    :} |
                    Expr:x OR Expr:y {:
                        RESULT=new ArithmeticExpr(x,y,new Operator("||");
                    :} |
                    EXCLAMATION Expr:x {:
                        RESULT=new ArithmeticExpr(x,new Operator("!"));
                    :} |
                    READINTEGER LEFTPAREN RIGHTPAREN {:
                        RESULT=new ReadIntegerExpr();
                    :} |
                    READLINE LEFTPAREN RIGHTPAREN {:
                        RESULT=new ReadLineExpr();
                    :} |
                    NEW T_ID:i {:
                        RESULT=new NewExpr(new ClassType(new Identifier(i)));
                    :} |
                    NEWARRAY LEFTPAREN Expr:e COMMA Type:t RIGHTPAREN {:
                        RESULT=new NewArrayExpr(e,t);
                    :};

Lvalue       ::=    T_ID:i {:
                        RESULT=new FieldValue(null,new Identifier(i));
                    :} |
                    Expr:e DOT T_ID:i {:
                        RESULT=new FieldValue(e,new Identifier(i));
                    :} |
                    Expr:e OPENBRACKET Expr:x CLOSEBRACKET {:
                        RESULT=new ArrayValue(e,x);
                    :};

Call         ::=    T_ID:i LEFTPAREN Actuals:a RIGHTPAREN {:
                        RESULT=new Call(null,new Identifier(i),a);
                    :} |
                    Expr:e DOT T_ID:i LEFTPAREN Actuals:a RIGHTPAREN {:
                        RESULT=new Call(e,new Identifier(i),a);
                    :};

Actuals      ::=    Exprs:e {:
                        RESULT=e;
                    :} |
                    {:
                        RESULT=new ArrayList<Expr>();
                    :};

Constants    ::=    T_INTLITERAL:c {:
                        RESULT=new IntConstant(c);
                    :} |
                    T_DOUBLELITERAL:c {:
                        RESULT=new DoubleConstant(c);
                    :} |
                    T_BOOLEANLITERAL:c {:
                        RESULT=new BoolConstant(c);
                    :} |
                    T_STRINGLITERAL:c {:
                        RESULT=new StringConstant(c);
                    :} |
                    NULL {:
                        RESULT=new NullConstant();
                    :};

